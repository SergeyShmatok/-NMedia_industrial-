package ru.netology.nmedia.entity

import androidx.room.Embedded
import androidx.room.Entity
import androidx.room.PrimaryKey
import ru.netology.nmedia.dto.Post

@Entity
data class PostEntity(
    @PrimaryKey(autoGenerate = true)
    val id: Long,
    val author: String,
    val authorId: Long,
    val content: String,
    val published: String,
    val likedByMe: Boolean,
    val likes: Int = 0,
    val authorAvatar: String,
    @Embedded // –í–º–µ—Å—Ç–æ Embedded —Ä–∞–Ω—å—à–µ –ø–∏—Å–∞–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞.
    // –¢–∞–∫ –∂–µ, –º–æ–∂–Ω–æ –±—ã–ª–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –ø–æ–ª—è –∏–∑ –≤—Å—Ç—Ä–∞–∏–≤–∞–µ–º–æ–≥–æ –∫–ª–∞—Å—Å–∞, –Ω–æ —Ç–∞–∫ –∫–æ–º–ø–∞–∫—Ç–Ω–µ–µ.
    var attachment: AttachmentEmbedded? = null, // –î–ª—è Attachment (–≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö)
    // –ø—Ä–∏–Ω—è—Ç–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏, –ø–æ—ç—Ç–æ–º—É –ø–æ—è–≤–∏–ª—Å—è "AttachmentEmbedded".
) {

    fun toDto() = Post(
        id = id,
        author = author,
        authorId = authorId,
        content = content,
        published = published,
        likedByMe = likedByMe,
        likes = likes,
        authorAvatar = authorAvatar,
        attachment = attachment?.toDto()
    ) // –ü–æ —Å—É—Ç–∏, —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Å—Ç–∞–Ω—Å Post
    // –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–≥–æ –ø–æ–ª—è –ø–æ–ª—è–º–∏ —Å–≤–æ–µ–≥–æ –∫–ª–∞—Å—Å–∞ (—ç–∫–∑–µ–º–ø–ª—è—Ä–∞).
    // –•–æ—Ä–æ—à–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –≤ —Å–≤—è–∑–∫–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ (**) —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—èüëá

    companion object {
        fun fromDto(dto: Post) =
            PostEntity(
                id = dto.id,
                author = dto.author,
                authorId = dto.authorId,
                content = dto.content,
                published = dto.published,
                likedByMe = dto.likedByMe,
                likes = dto.likes,
                authorAvatar = dto.authorAvatar,
                attachment = dto.attachment
                    ?.let(AttachmentEmbedded::fromDto),
                // ?.let(AttachmentEmbedded.fromDto(it))
            )
    }

}

fun List<PostEntity>.toDto(): List<Post> = map(PostEntity::toDto) // (**)
// fun List<PostEntity>.toDto(): List<Post> = map { it.toDto() } - –∏–ª–∏ —Ç–∞–∫

fun List<Post>.toEntity(): List<PostEntity> = map(PostEntity::fromDto)


//--------------------------------------------------------------------------------------------------
//                                      - –í—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç -
//  fun toDto(entity: PostEntity) = Post(
//        entity.id, entity.author, entity.content, entity.published, entity.likedByMe, entity.likes,
//        authorAvatar = "",
//    )
//
//    companion object {
//        fun fromDto(dto: Post) =
//            PostEntity(dto.id, dto.author, dto.content, dto.published, dto.likedByMe, dto.likes)
//    }
//--------------------------------------------------------------------------------------------------